{"version":3,"sources":["pages/Home.js","pages/About.js","pages/Posts.js","pages/ErrorPage.js","components/Menu.js","shared/App.js","client/Root.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","About","_ref","location","match","detail","queryString","parse","search","params","name","Posts","postID","category","postExist","concat","react_router","to","ErrorPage","makeMenuItem","url","meta","lib","exact","Nav","Link","Menu","id","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","className","App","components_Menu","path","component","Component","Root","react_router_dom","shared_App","Boolean","window","hostname","ReactDOM","render","client_Root","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8PAUeA,EARF,WACT,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,qCCQGC,EAXD,SAAAC,GAAuB,IAArBC,EAAqBD,EAArBC,SAAUC,EAAWF,EAAXE,MAEhBC,EAA0B,SADlBC,IAAYC,MAAMJ,EAASK,QACpBH,OACrB,OACIP,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,mBAAWI,EAAMK,OAAOC,MACvBL,GAAU,sBCaRM,EAnBD,SAAAT,GAAa,IAAXE,EAAWF,EAAXE,MAERQ,EAASR,EAAMK,OAAOG,OACtBC,EAAWT,EAAMK,OAAOI,SACxBC,GAAY,EAKhB,OAHa,MAAVF,GAA8B,MAAZC,IACjBC,GAAY,GAGZhB,EAAAC,EAAAC,cAAA,WAEKc,EAAS,UAAAC,OAAcF,EAAd,KAAAE,OAA0BH,EAA1B,OAA0Cd,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAUC,GAAI,SAClEnB,EAAAC,EAAAC,cAAA,UAAKa,EAAL,IAAgBD,KCLbM,EARG,WACd,OACIpB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,sECCNmB,EAAe,SAACC,EAAKC,GAAN,OACjBvB,EAAAC,EAAAC,cAACsB,EAAA,cAAD,CAAeC,OAAK,EAACN,GAAIG,GACrBtB,EAAAC,EAAAC,cAACwB,EAAA,EAAIC,KAAL,KAAWJ,KA0BJK,EAvBF,WACT,OACI5B,EAAAC,EAAAC,cAAA,OAAK2B,GAAG,cACJ7B,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACtBhC,EAAAC,EAAAC,cAAC4B,EAAA,EAAOG,MAAR,CAAcC,KAAK,KAAnB,QACAlC,EAAAC,EAAAC,cAAC4B,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7BpC,EAAAC,EAAAC,cAAC4B,EAAA,EAAOO,SAAR,CAAiBR,GAAG,oBAChB7B,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAKY,UAAU,WACVjB,EAAa,IAAK,QAClBA,EAAa,SAAU,SACvBA,EAAa,SAAU,SACvBA,EAAa,wBAAyB,mBAKnDrB,EAAAC,EAAAC,cAAA,aCAGqC,mLAnBP,OACIvC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACsC,EAAD,MACIxC,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOO,OAAK,EAACgB,KAAK,IAAIC,UAAW3C,IACrCC,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACIlB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOuB,KAAK,eAAeC,UAAWvC,IACtCH,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOuB,KAAK,SAASC,UAAWvC,KAEpCH,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACIlB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOuB,KAAK,2BAA2BC,UAAW7B,IAClDb,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOuB,KAAK,SAASC,UAAW7B,KAGpCb,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOuB,KAAK,OAAOC,UAAWtB,YAf5BuB,aCIHC,EANF,kBACT5C,EAAAC,EAAAC,cAAC2C,EAAA,cAAD,KACI7C,EAAAC,EAAAC,cAAC4C,EAAD,QCMYC,QACW,cAA7BC,OAAO3C,SAAS4C,UAEe,UAA7BD,OAAO3C,SAAS4C,UAEhBD,OAAO3C,SAAS4C,SAAS3C,MACvB,2DCZN4C,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAAUC,SAASC,eAAe,SD2H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ebc64c17.chunk.js","sourcesContent":["import React from 'react'\n\nconst Home = () => {\n    return (\n        <div>\n            <h2>HOME</h2>\n        </div>\n    )\n}\n\nexport default Home;","import React from 'react'\nimport queryString from 'query-string'\nconst About = ({location, match}) => {\n    const query = queryString.parse(location.search)\n    const detail = query.detail === 'true'\n    return (\n        <div>\n            <h2>About {match.params.name}</h2>\n            {detail && 'detail : blahblah' }\n        </div>\n    )\n}\n\nexport default About;","import React from 'react'\nimport {Redirect} from 'react-router-dom'\nconst Posts = ({match}) => {\n    // let url = `/post/${match.params.postID}.md`\n    let postID = match.params.postID\n    let category = match.params.category\n    let postExist = true\n\n    if(postID == null || category == null) {\n        postExist = false\n    }\n    return (\n        <div>\n            \n            {postExist ? (`/posts/${category}/${postID}.md`) : (<Redirect to =\"/404\"/>)}\n            <h1>{category} {postID}</h1>\n        </div>\n    )\n}\n\n\nexport default Posts;","import React from 'react'\n\nconst ErrorPage = () => {\n    return (\n        <div>\n            <h1>THIS IS A TEMPORARY ERROR PAGE</h1>\n        </div>\n    )\n}\n\nexport default ErrorPage","import React from 'react'\n// import {NavLink} from 'react-router-dom'\nimport {Navbar, Nav} from 'react-bootstrap'\nimport {LinkContainer} from 'react-router-bootstrap'\n\n\nconst makeMenuItem = (url, meta) => (\n    <LinkContainer exact to={url}>\n        <Nav.Link>{meta}</Nav.Link>\n    </LinkContainer>\n)\nconst Menu = () => {\n    return (\n        <div id=\"navigation\">\n            <Navbar bg=\"light\" expand=\"lg\">\n                <Navbar.Brand href=\"/\">Blog</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                        {makeMenuItem(\"/\", \"HOME\")}\n                        {makeMenuItem(\"/about\", \"ABOUT\")}\n                        {makeMenuItem(\"/posts\", \"POSTS\")}\n                        {makeMenuItem(\"/posts/science/nature\", \"POST/SCIENCE\")}\n                    </Nav>\n\n                </Navbar.Collapse>\n            </Navbar>\n            <br/>\n\n\n        </div>\n    )\n}\n\nexport default Menu;","import React, {Component} from 'react'\nimport {Route, Switch} from 'react-router-dom'\nimport {Home, About, Posts, ErrorPage} from 'pages'\nimport Menu from '../components/Menu';\n\n\nclass App extends Component {\n    render() {\n        return (\n            <div>\n                <Menu />\n                    <Route exact path=\"/\" component={Home}/>\n                <Switch>\n                    <Route path=\"/about/:name\" component={About}/>\n                    <Route path=\"/about\" component={About}/>\n                </Switch>\n                <Switch>\n                    <Route path=\"/posts/:category/:postID\" component={Posts} />\n                    <Route path=\"/posts\" component={Posts} />\n\n                </Switch>\n                <Route path=\"/404\" component={ErrorPage}/>\n            </div>\n        )\n    }\n}\n\nexport default App;","import React from 'react'\nimport {BrowserRouter} from 'react-router-dom'\nimport App from 'shared/App'\n\nconst Root = () => (\n    <BrowserRouter>\n        <App/>\n    </BrowserRouter>\n)\n\nexport default Root","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Root from './client/Root'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}